[{"path":"https://epiverse-trace.github.io/datatagr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 package authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Design Principles for {datatagr}","text":"datatagr provides generic labelling validation tools. contrast original versions linelist (<=v1.1.4), datatagr functions variable level instead object level. validation tooling specific type checking variables providing feedback potential data loss coercion. aim complex validations time.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"naming-conventions","dir":"Articles","previous_headings":"","what":"Naming conventions","title":"Design Principles for {datatagr}","text":"separate functions much reasonable files R/. tests available file R/, follows convention test-<filename>.R tests/testthat/. source code respective tests. try make function names descriptive possible, keeping short. make package easy use understand.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"inputoutputinteroperability","dir":"Articles","previous_headings":"","what":"Input/Output/Interoperability","title":"Design Principles for {datatagr}","text":"data frame object can passed datatagr. Output datatagr remains data frame object, additional datatagr class attribute. means remains interoperable regular data frame operations one may attempt . datatagr interoperable pipes (, |> %>%). allows easy chaining functions. Note guarantees label attributes preserved piping wrangling another way. example, dplyr drops variable level attributes using dplyr::mutate().","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Design Principles for {datatagr}","text":"Generic: package designed generic tool labelling validating data. ensure package can used wide range contexts limited specific use case. specific use cases implemented separate packages. Local: keep functions local possible. means operations precise feasible, non-destructive ensure changes one variable unexpectedly affect another. helps ensure package predictable easy use + maintain. Minimize number functions: aim keep number functions package minimum. helps usability maintainability. Base R: aim use base R functions possible. ensure package lightweight many dependencies. example use labelled labelling package. feel like uphold one design decisions, please let us know üòä","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"quirks","dir":"Articles","previous_headings":"Design decisions","what":"Quirks","title":"Design Principles for {datatagr}","text":"package development quirks. outline quirks aware : Currently, emptying labels leads setting \"\" (empty character strings). Preferably end setting NULL end.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Design Principles for {datatagr}","text":"checkmate - provide assertions function arguments lifecycle - help manage function lifecycle rlang - ... list parsing tidyselect - ensure can use pipes has_label()","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"development-journey","dir":"Articles","previous_headings":"","what":"Development journey","title":"Design Principles for {datatagr}","text":"datatagr package major refactor linelist v1.1.4. refactor necessary make package generic make codebase maintainable. refactor completed series steps documented #37.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Hartgerink. Maintainer.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hartgerink C (2024). datatagr: Generic Data Labelling Validating. R package version 0.0.1, https://github.com/epiverse-trace/datatagr, https://epiverse-trace.github.io/datatagr/.","code":"@Manual{,   title = {datatagr: Generic Data Labelling and Validating},   author = {Chris Hartgerink},   year = {2024},   note = {R package version 0.0.1, https://github.com/epiverse-trace/datatagr},   url = {https://epiverse-trace.github.io/datatagr/}, }"},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"datatagr-generic-data-labelling-and-validating-","dir":"","previous_headings":"","what":"Generic Data Labelling and Validating","title":"Generic Data Labelling and Validating","text":"datatagr provides functions label validate data kind. datatagr abstraction linelist, applies principles epidemiological linelist data. original proposal package can found Discussion board.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generic Data Labelling and Validating","text":"can install development version datatagr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"epiverse-trace/datatagr\")"},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Generic Data Labelling and Validating","text":"","code":"library(datatagr)  # Create a datatagr object x <- make_datatagr(cars, speed = 'Miles per hour', dist = 'Distance in miles')  # Validate the data are of a specific type validate_datatagr(x,    speed = 'numeric',        # speed should be numeric   # type() is a helper function of related classes   dist = type('numeric')    # dist should be numeric, integer )"},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"lifecycle","dir":"","previous_headings":"Development","what":"Lifecycle","title":"Generic Data Labelling and Validating","text":"package currently experimental, defined RECON software lifecycle. means essential features mechanisms still developed, package ready use outside development team.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"contributions","dir":"","previous_headings":"Development","what":"Contributions","title":"Generic Data Labelling and Validating","text":"Contributions welcome via pull requests. Anything bigger typo fix small documentation update discussed issue first. want report bug suggest enhancement, please open issue. üòä See also general Epiverse TRACE contribution document. make easier us evaluate contribution, please run following commands submitting pull request ensure code consistent rest package: reduce time takes us review contribution. Thank ! üòä","code":"styler::style_pkg() spelling::update_wordlist(pkg = \".\", vignettes = TRUE) devtools::document()  lintr::lint_package()  devtools::test() devtools::check()"},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"related-projects","dir":"","previous_headings":"Development","what":"Related projects","title":"Generic Data Labelling and Validating","text":"project related existing projects R languages, also differs following aspects: linelist: package managing validating linelist data - original inspiration datatagr.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"code-of-conduct","dir":"","previous_headings":"Development","what":"Code of Conduct","title":"Generic Data Labelling and Validating","text":"Please note datatagr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"datatagr package provides tools help label validate data. 'datatagr' class adds column level attributes 'data.frame'. labelled, variables can seamlessly used downstream analyses, making data pipelines robust reliable.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"package aim complete integration dplyr functions. example, dplyr::mutate() dplyr::bind_rows() preserve labels. provide compatibility dplyr::rename().","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"make_datatagr(): create datatagr objects data.frame tibble set_labels(): change add labelled variables datatagr labels(): get list labels datatagr labels_df(): get data.frame tagged variables lost_labels_action(): change behaviour actions labelled variables lost (e.g removing columns storing labelled variables) issue warnings, errors, nothing get_lost_labels_action(): check current behaviour actions labelled variables lost","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"dedicated-methods","dir":"Reference","previous_headings":"","what":"Dedicated methods","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"Specific methods commonly used handle data.frame provided datatagr objects, typically help flag prevent actions alter lose labelled variables (may thus break downstream data pipelines). names() <- (related functions, dplyr::rename()) rename labels needed x[...] <- x[[...]] <- (see sub_datatagr): adopt desired behaviour labelled variables lost print(): prints info datatagr addition data.frame tibble","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"Maintainer: Chris Hartgerink chris@data.org (ORCID)","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Tools for Labelling and Validating Data ‚Äî datatagr-package","text":"","code":"# using base R style x <- make_datatagr(cars[1:50, ],   speed = \"Miles per hour\",   dist = \"Distance in miles\" ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## check labelled variables labels(x) #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> [1] \"Distance in miles\" #>   ## robust renaming names(x)[1] <- \"identifier\" x #>  #> // datatagr object #>    identifier dist #> 1           4    2 #> 2           4   10 #> 3           7    4 #> 4           7   22 #> 5           8   16 #> 6           9   10 #> 7          10   18 #> 8          10   26 #> 9          10   34 #> 10         11   17 #> 11         11   28 #> 12         12   14 #> 13         12   20 #> 14         12   24 #> 15         12   28 #> 16         13   26 #> 17         13   34 #> 18         13   34 #> 19         13   46 #> 20         14   26 #> 21         14   36 #> 22         14   60 #> 23         14   80 #> 24         15   20 #> 25         15   26 #> 26         15   54 #> 27         16   32 #> 28         16   40 #> 29         17   32 #> 30         17   40 #> 31         17   50 #> 32         18   42 #> 33         18   56 #> 34         18   76 #> 35         18   84 #> 36         19   36 #> 37         19   46 #> 38         19   68 #> 39         20   32 #> 40         20   48 #> 41         20   52 #> 42         20   56 #> 43         20   64 #> 44         22   66 #> 45         23   54 #> 46         24   70 #> 47         24   92 #> 48         24   93 #> 49         24  120 #> 50         25   85 #>  #> labels: identifier-Miles per hour, dist-Distance in miles   ## example of dropping labels by mistake - default: warning x[, 2] #> Warning: The following labelled variables are lost: #>  identifier - Miles per hour #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> labels: dist-Distance in miles   ## to silence warnings when labels are dropped lost_labels_action(\"none\") #> Lost labels will now be ignored. x[, 2] #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> labels: dist-Distance in miles   ## to trigger errors when labels are dropped # lost_labels_action(\"error\") # x[, 2:5]  ## reset default behaviour lost_labels_action() #> Lost labels will now issue a warning.  # using tidyverse style  ## example of creating a datatagr, adding a new variable, and adding a label ## for it  if (require(dplyr) && require(magrittr)) {   x <- cars %>%     tibble() %>%     make_datatagr(       speed = \"Miles per hour\",       dist = \"Distance in miles\"     ) %>%     mutate(result = if_else(speed > 50, \"fast\", \"slow\")) %>%     set_labels(result = \"Ticket yes/no\")    head(x)    ## extract labelled variables   x %>%     select(has_label(c(\"Ticket yes/no\")))    ## Retrieve all labels   x %>%     labels()    ## Select based on variable name   x %>%     select(starts_with(\"speed\")) } #> Loading required package: dplyr #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union #> Loading required package: magrittr #> Warning: The following labelled variables are lost: #>  speed - Miles per hour, dist - Distance in miles #> Warning: The following labelled variables are lost: #>  dist - Distance in miles, result - Ticket yes/no #>  #> // datatagr object #> # A tibble: 50 √ó 1 #>    speed #>    <dbl> #>  1     4 #>  2     4 #>  3     7 #>  4     7 #>  5     8 #>  6     9 #>  7    10 #>  8    10 #>  9    10 #> 10    11 #> # ‚Ñπ 40 more rows #>  #> labels: speed-Miles per hour"},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":null,"dir":"Reference","previous_headings":"","what":"A selector function to use in tidyverse functions ‚Äî has_label","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"selector function use tidyverse functions","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"","code":"has_label(labels)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"labels character vector labels want operate ","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"numeric vector containing position columns requested labels","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"Using pipeline results 'datatagr' object, maintain variable labels time. primarily useful make pipelines human readable.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A selector function to use in tidyverse functions ‚Äî has_label","text":"","code":"## create datatagr x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" ) head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> labels: speed-Miles per hour, dist-Distance in miles   if (require(dplyr) && require(magrittr)) {   x %>%     select(has_label(c(\"Miles per hour\", \"Distance in miles\"))) %>%     head() } #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> labels: speed-Miles per hour, dist-Distance in miles"},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of labels in a datatagr ‚Äî labels","title":"Get the list of labels in a datatagr ‚Äî labels","text":"function returns list labels identifying specific variable types datatagr object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of labels in a datatagr ‚Äî labels","text":"","code":"labels(x, show_null = FALSE)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the list of labels in a datatagr ‚Äî labels","text":"x datatagr object show_null logical indicating complete list labels, including NULL ones, returned; FALSE, labels non-NULL value returned; defaults FALSE","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of labels in a datatagr ‚Äî labels","text":"function returns named list names indicate column correspond , values indicate relevant labels.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the list of labels in a datatagr ‚Äî labels","text":"Labels stored label attribute column variable.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of labels in a datatagr ‚Äî labels","text":"","code":"## make a datatagr x <- make_datatagr(cars, speed = \"Miles per hour\")  ## check non-null labels labels(x) #> $speed #> [1] \"Miles per hour\" #>   ## get a list of all labels, including NULL ones labels(x, TRUE) #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> NULL #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a data.frame of all labelled variables ‚Äî labels_df","title":"Extract a data.frame of all labelled variables ‚Äî labels_df","text":"function returns data.frame, labelled variables (stored datatagr object) renamed. Note output longer datatagr, regular data.frame. Unlabeled variables unaffected.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a data.frame of all labelled variables ‚Äî labels_df","text":"","code":"labels_df(x)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a data.frame of all labelled variables ‚Äî labels_df","text":"x datatagr object","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a data.frame of all labelled variables ‚Äî labels_df","text":"data.frame variables renamed according labels.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/labels_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a data.frame of all labelled variables ‚Äî labels_df","text":"","code":"x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" )  ## get a data.frame with variables renamed based on labels labels_df(x) #>    Miles per hour Distance in miles #> 1               4                 2 #> 2               4                10 #> 3               7                 4 #> 4               7                22 #> 5               8                16 #> 6               9                10 #> 7              10                18 #> 8              10                26 #> 9              10                34 #> 10             11                17 #> 11             11                28 #> 12             12                14 #> 13             12                20 #> 14             12                24 #> 15             12                28 #> 16             13                26 #> 17             13                34 #> 18             13                34 #> 19             13                46 #> 20             14                26 #> 21             14                36 #> 22             14                60 #> 23             14                80 #> 24             15                20 #> 25             15                26 #> 26             15                54 #> 27             16                32 #> 28             16                40 #> 29             17                32 #> 30             17                40 #> 31             17                50 #> 32             18                42 #> 33             18                56 #> 34             18                76 #> 35             18                84 #> 36             19                36 #> 37             19                46 #> 38             19                68 #> 39             20                32 #> 40             20                48 #> 41             20                52 #> 42             20                56 #> 43             20                64 #> 44             22                66 #> 45             23                54 #> 46             24                70 #> 47             24                92 #> 48             24                93 #> 49             24               120 #> 50             25                85"},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for lost labels and throw relevant warning or error ‚Äî lost_labels","title":"Check for lost labels and throw relevant warning or error ‚Äî lost_labels","text":"internal function checks labels present old labels new labels. labels lost, throws warning error based specified action.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for lost labels and throw relevant warning or error ‚Äî lost_labels","text":"","code":"lost_labels(old, new, lost_action)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for lost labels and throw relevant warning or error ‚Äî lost_labels","text":"old named list old labels. new named list new labels. lost_action character string specifying action take labels lost. Can \"none\", \"warning\", \"error\".","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for lost labels and throw relevant warning or error ‚Äî lost_labels","text":"None. Throws warning error labels lost.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and set behaviour for lost labels ‚Äî lost_labels_action","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"function determines behaviour adopt labelled variables datatagr lost example subsetting. achieved using options defined datatagr package.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"","code":"lost_labels_action(action = c(\"warning\", \"error\", \"none\"), quiet = FALSE)  get_lost_labels_action()"},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"action character indicating behaviour adopt labelled variables lost: \"error\" (default) issue error; \"warning\" issue warning; \"none\" nothing quiet logical indicating message displayed; used outside pipelines","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"returns NULL; option set options(\"datatagr\")","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"errors warnings generated datatagr case labelled variable loss custom class datatagr_error datatagr_warning respectively.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_labels_action.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and set behaviour for lost labels ‚Äî lost_labels_action","text":"","code":"# reset default - done automatically at package loading lost_labels_action() #> Lost labels will now issue a warning.  # check current value get_lost_labels_action() #> [1] \"warning\"  # change to issue errors when tags are lost lost_labels_action(\"error\") #> Lost labels will now issue an error. get_lost_labels_action() #> [1] \"error\"  # change to ignore when tags are lost lost_labels_action(\"none\") #> Lost labels will now be ignored. get_lost_labels_action() #> [1] \"none\"  # reset to default: warning lost_labels_action() #> Lost labels will now issue a warning."},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a datatagr from a data.frame ‚Äî make_datatagr","title":"Create a datatagr from a data.frame ‚Äî make_datatagr","text":"function converts data.frame tibble datatagr object, data labelled validated. output seem data.frame, datatagr-aware packages able automatically use labelled fields data cleaning analysis.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a datatagr from a data.frame ‚Äî make_datatagr","text":"","code":"make_datatagr(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a datatagr from a data.frame ‚Äî make_datatagr","text":"x data.frame tibble ... <dynamic-dots> named list variable names x list names labels list values. Values set NULL remove label. specifying labels, please also see default_values.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a datatagr from a data.frame ‚Äî make_datatagr","text":"function returns datatagr object.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a datatagr from a data.frame ‚Äî make_datatagr","text":"","code":"x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" )  ## print result - just first few entries head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## check labels labels(x) #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> [1] \"Distance in miles\" #>   ## Labels can also be passed as a list with the splice operator (!!!) my_labels <- list(   speed = \"Miles per hour\",   dist = \"Distance in miles\" ) new_x <- make_datatagr(cars, !!!my_labels)  ## The output is strictly equivalent to the previous one identical(x, new_x) #> [1] TRUE"},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns of a datatagr ‚Äî names<-.datatagr","title":"Rename columns of a datatagr ‚Äî names<-.datatagr","text":"function can used rename columns datatagr (, adjust variable names).","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns of a datatagr ‚Äî names<-.datatagr","text":"","code":"# S3 method for class 'datatagr' names(x) <- value"},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns of a datatagr ‚Äî names<-.datatagr","text":"x datatagr object value character vector set new names columns x","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns of a datatagr ‚Äî names<-.datatagr","text":"datatagr new column names","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns of a datatagr ‚Äî names<-.datatagr","text":"","code":"## create datatagr x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" ) head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## change names names(x)[1] <- \"mph\"  ## see results: columns have been updated head(x) #>  #> // datatagr object #>   mph dist #> 1   4    2 #> 2   4   10 #> 3   7    4 #> 4   7   22 #> 5   8   16 #> 6   9   10 #>  #> labels: mph-Miles per hour, dist-Distance in miles   # This also works with using `dplyr::rename()` because it uses names<-() # under the hood if (require(dplyr) && require(magrittr)) {   x <- x %>%     rename(speed = \"mph\")   head(x)   labels(x) } #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> [1] \"Distance in miles\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing method for datatagr objects ‚Äî print.datatagr","title":"Printing method for datatagr objects ‚Äî print.datatagr","text":"function prints datatagr objects.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing method for datatagr objects ‚Äî print.datatagr","text":"","code":"# S3 method for class 'datatagr' print(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing method for datatagr objects ‚Äî print.datatagr","text":"x datatagr object ... arguments passed 'print'","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing method for datatagr objects ‚Äî print.datatagr","text":"Invisibly returns object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing method for datatagr objects ‚Äî print.datatagr","text":"","code":"## create datatagr x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" )  ## print object - using only the first few entries head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> labels: speed-Miles per hour, dist-Distance in miles   # version with a tibble if (require(tibble) && require(magrittr)) {   cars %>%     tibble() %>%     make_datatagr(       speed = \"Miles per hour\",       dist = \"Distance in miles\"     ) } #> Loading required package: tibble #>  #> // datatagr object #> # A tibble: 50 √ó 2 #>    speed  dist #>    <dbl> <dbl> #>  1     4     2 #>  2     4    10 #>  3     7     4 #>  4     7    22 #>  5     8    16 #>  6     9    10 #>  7    10    18 #>  8    10    26 #>  9    10    34 #> 10    11    17 #> # ‚Ñπ 40 more rows #>  #> labels: speed-Miles per hour, dist-Distance in miles"},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Change labels of a datatagr object ‚Äî set_labels","title":"Change labels of a datatagr object ‚Äî set_labels","text":"function changes labels datatagr object, using syntax constructor make_datatagr().","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change labels of a datatagr object ‚Äî set_labels","text":"","code":"set_labels(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change labels of a datatagr object ‚Äî set_labels","text":"x data.frame tibble ... <dynamic-dots> named list variable names x list names labels list values. Values set NULL remove label. specifying labels, please also see default_values.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change labels of a datatagr object ‚Äî set_labels","text":"function returns datatagr object.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change labels of a datatagr object ‚Äî set_labels","text":"","code":"## create a datatagr x <- make_datatagr(cars, speed = \"Miles per hour\") labels(x) #> $speed #> [1] \"Miles per hour\" #>   ## add new labels and fix an existing one x <- set_labels(x, dist = \"Distance\") labels(x) #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> [1] \"Distance\" #>   ## remove labels by setting them to NULL old_labels <- labels(x) x <- set_labels(x, speed = NULL, dist = NULL) labels(x) #> $speed #> [1] \"\" #>  #> $dist #> [1] \"\" #>   ## setting labels providing a list (used to restore old labels here) x <- set_labels(x, !!!old_labels) labels(x) #> $speed #> [1] \"Miles per hour\" #>  #> $dist #> [1] \"Distance\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting of datatagr objects ‚Äî [.datatagr","title":"Subsetting of datatagr objects ‚Äî [.datatagr","text":"[] [[]] operators datatagr objects behaves like regular data.frame tibble, check labelled variables lost, takes appropriate action case (warning, error, ignore, depending general option set via lost_labels_action()) .","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting of datatagr objects ‚Äî [.datatagr","text":"","code":"# S3 method for class 'datatagr' x[i, j, drop = FALSE]  # S3 method for class 'datatagr' x[i, j] <- value  # S3 method for class 'datatagr' x[[i, j]] <- value  # S3 method for class 'datatagr' x$name <- value"},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting of datatagr objects ‚Äî [.datatagr","text":"x datatagr object vector integer logical subset rows datatagr j vector character, integer, logical subset columns datatagr drop logical indicating , single column selected, data.frame class dropped return simple vector, case datatagr class lost well; defaults FALSE value replacement used entries identified x name literal character string name (possibly backtick     quoted).  extraction, normally (see     ‚ÄòEnvironments‚Äô) partially matched names     object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting of datatagr objects ‚Äî [.datatagr","text":"drop happening, datatagr. Otherwise atomic vector.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting of datatagr objects ‚Äî [.datatagr","text":"","code":"if (require(dplyr) && require(magrittr)) {   ## create a datatagr   x <- cars %>%     make_datatagr(       speed = \"Miles per hour\",       dist = \"Distance in miles\"     ) %>%     mutate(result = if_else(speed > 50, \"fast\", \"slow\")) %>%     set_labels(result = \"Ticket\")   x    ## dangerous removal of a labelled column setting it to NULL issues warning   x[, 1] <- NULL   x    x[[2]] <- NULL   x    x$age <- NULL   x } #> Warning: The following labelled variables are lost: #>  speed - Miles per hour #> Warning: The following labelled variables are lost: #>  result - Ticket #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> labels: dist-Distance in miles"},{"path":"https://epiverse-trace.github.io/datatagr/reference/type.html","id":null,"dir":"Reference","previous_headings":"","what":"Type Selection Helper ‚Äî type","title":"Type Selection Helper ‚Äî type","text":"Function swiftly provide access generic categories types within R. can used provide comprehensive typesetting creating datatagr object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type Selection Helper ‚Äî type","text":"","code":"type(x)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type Selection Helper ‚Äî type","text":"x Character indicating desired type. Options include date, category, numeric, binary time.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type Selection Helper ‚Äî type","text":"vector classes","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type Selection Helper ‚Äî type","text":"","code":"x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" )  validate_types(   x,   speed = type(\"numeric\"),   dist = \"numeric\" ) #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the content of a datatagr object ‚Äî validate_datatagr","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"function evaluates validity datatagr object checking object class, labels, types variables. combines validation checks made validate_types() validate_labels(). See 'Details' section information checks performed.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"","code":"validate_datatagr(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"x datatagr object ... <dynamic-dots> named list variable names x list names related types list values.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"checks pass, datatagr object; otherwise issues error.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"following checks performed: x datatagr object variables x well-formed label attribute variables correspond specified types","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the content of a datatagr object ‚Äî validate_datatagr","text":"","code":"## create a valid datatagr x <- cars |>   make_datatagr(     speed = \"Miles per hour\",     dist = \"Distance in miles\"   ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## validation validate_datatagr(x,   speed = c(\"numeric\", \"factor\"),   dist = \"numeric\" ) #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## the below issues an error ## note: tryCatch is only used to avoid a genuine error in the example tryCatch(validate_datatagr(x,   speed = c(\"numeric\", \"factor\"),   dist = \"factor\" ), error = paste) #> [1] \"Error: Some labels have the wrong class:\\n  - dist: Must inherit from class 'factor', but has class 'numeric'\\n\\n\""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the labels of a datatagr object ‚Äî validate_labels","title":"Checks the labels of a datatagr object ‚Äî validate_labels","text":"function evaluates validity labels datatagr object checking : ) labels present ii) labels list character NULL values.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the labels of a datatagr object ‚Äî validate_labels","text":"","code":"validate_labels(x)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the labels of a datatagr object ‚Äî validate_labels","text":"x datatagr object","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the labels of a datatagr object ‚Äî validate_labels","text":"checks pass, datatagr object; otherwise issues error.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the labels of a datatagr object ‚Äî validate_labels","text":"","code":"## create a valid datatagr x <- cars |>   make_datatagr(     speed = \"Miles per hour\",     dist = \"Distance in miles\"   ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## the below issues an error as datatagr doesn't know any defaults ## note: tryCatch is only used to avoid a genuine error in the example tryCatch(validate_datatagr(x), error = paste) #> [1] \"Error in validate_types(x, ...): Assertion on 'types' failed: Must have length >= 1, but has length 0.\\n\"  ## validation requires you to specify the types directly validate_datatagr(x,   speed = c(\"integer\", \"numeric\"),   dist = \"numeric\" ) #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Type check variables ‚Äî validate_types","title":"Type check variables ‚Äî validate_types","text":"function checks type variables datatagr accepted classes. checks type provided variables ignores provided.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type check variables ‚Äî validate_types","text":"","code":"validate_types(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type check variables ‚Äî validate_types","text":"x datatagr object ... <dynamic-dots> named list variable names x list names related types list values.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type check variables ‚Äî validate_types","text":"named list.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type check variables ‚Äî validate_types","text":"","code":"x <- make_datatagr(cars,   speed = \"Miles per hour\",   dist = \"Distance in miles\" ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles   ## the below would issue an error ## note: tryCatch is only used to avoid a genuine error in the example tryCatch(validate_types(x), error = paste) #> [1] \"Error in validate_types(x): Assertion on 'types' failed: Must have length >= 1, but has length 0.\\n\"  ## to allow other types, e.g. gender to be integer, character or factor validate_types(x, speed = \"numeric\", dist = c(   \"integer\",   \"character\", \"numeric\" )) #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> labels: speed-Miles per hour, dist-Distance in miles"}]

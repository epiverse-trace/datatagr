[{"path":"https://epiverse-trace.github.io/datatagr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 package authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Design Principles for {datatagr}","text":"< Outline aims package, potentially mention key exported functions, maybe links R packages. also possible mention certain aspects fall outside package’s scope. >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"naming-conventions","dir":"Articles","previous_headings":"","what":"Naming conventions","title":"Design Principles for {datatagr}","text":"< Description scheme /conventions used naming functions arguments. can use prefix exported functions, name mould (“function named verb_object”), naming convention used throughout package. >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"inputoutputinteroperability","dir":"Articles","previous_headings":"","what":"Input/Output/Interoperability","title":"Design Principles for {datatagr}","text":"< Describe data structures (.e. vectors, <data.frames> classes) given input key functions data structures functions return. design decisions around /O choices also mention enhances interoperability R packages pipelines (e.g. %>%). >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Design Principles for {datatagr}","text":"< list bullet points explaining design decision reasoning. >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Design Principles for {datatagr}","text":"< list dependencies used package explanation required. dependencies need explained best explain key dependencies. can used give context certain dependencies used (e.g. “package expected used tidyverse pipelines , consider tidyverse packages good dependencies already installed user’s computer.”). section can also mention dependencies planned removed added future development. Suggested dependencies need explained unless unusual may surprise developers inclusion. >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/articles/design-principles.html","id":"development-journey","dir":"Articles","previous_headings":"","what":"Development journey","title":"Design Principles for {datatagr}","text":"< package undergone large refactoring section can used explain changes. >","code":""},{"path":"https://epiverse-trace.github.io/datatagr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Hartgerink. Maintainer.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hartgerink C (2024). datatagr: Generic Data Tagging Validating. R package version 0.0.1.","code":"@Manual{,   title = {datatagr: Generic Data Tagging and Validating},   author = {Chris Hartgerink},   year = {2024},   note = {R package version 0.0.1}, }"},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"datatagr-generic-data-tagging-and-validating-","dir":"","previous_headings":"","what":"Generic Data Tagging and Validating","title":"Generic Data Tagging and Validating","text":"datatagr provides functions tag, validate, safeguard data kind. datatagr abstraction linelist, applies principles epidemiological data. original proposal package can found Discussion board. ![INFO] project management roadmap, please see relevant GitHub Project.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generic Data Tagging and Validating","text":"can install development version datatagr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"epiverse-trace/datatagr\")"},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generic Data Tagging and Validating","text":"examples illustrate current functionalities","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"lifecycle","dir":"","previous_headings":"Development","what":"Lifecycle","title":"Generic Data Tagging and Validating","text":"package currently concept, defined RECON software lifecycle. means essential features mechanisms still developed, package ready use outside development team.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"contributions","dir":"","previous_headings":"Development","what":"Contributions","title":"Generic Data Tagging and Validating","text":"Contributions welcome via pull requests.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"related-projects","dir":"","previous_headings":"Development","what":"Related projects","title":"Generic Data Tagging and Validating","text":"project related existing projects R languages, also differs following aspects:","code":""},{"path":"https://epiverse-trace.github.io/datatagr/index.html","id":"code-of-conduct","dir":"","previous_headings":"Development","what":"Code of Conduct","title":"Generic Data Tagging and Validating","text":"Please note datatagr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Tools for Tagging and Validating Data — datatagr-package","title":"Base Tools for Tagging and Validating Data — datatagr-package","text":"datatagr package provides tools help tag validate data. 'datatagr' class adds custom tagging system classical 'data.frame' objects identify key data. tagged, variables can seamlessly used downstream analyses, making data pipelines robust reliable.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"Base Tools for Tagging and Validating Data — datatagr-package","text":"make_datatagr(): create datatagr objects data.frame tibble set_tags(): change add tagged variables datatagr tags(): get list tags datatagr tags_df(): get data.frame tagged variables lost_tags_action(): change behaviour actions tagged variables lost (e.g. removing columns storing tagged variables) issue warnings, errors, nothing get_lost_tags_action(): check current behaviour actions tagged variables lost","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"dedicated-methods","dir":"Reference","previous_headings":"","what":"Dedicated methods","title":"Base Tools for Tagging and Validating Data — datatagr-package","text":"Specific methods commonly used handle data.frame provided datatagr objects, typically help flag prevent actions alter lose tagged variables (may thus break downstream data pipelines). names() <- (related functions, dplyr::rename()) rename tags needed x[...] <- x[[...]] <- (see sub_datatagr): adopt desired behaviour tagged variables lost print(): prints info datatagr addition data.frame tibble","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Base Tools for Tagging and Validating Data — datatagr-package","text":"Maintainer: Chris Hartgerink chris@data.org (ORCID)","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/datatagr-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Tools for Tagging and Validating Data — datatagr-package","text":"","code":"# using base R style x <- make_datatagr(cars[1:50, ],   mph = \"speed\",   distance = \"dist\" ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> // tags: mph:speed, distance:dist   ## check tagged variables tags(x) #> $mph #> [1] \"speed\" #>  #> $distance #> [1] \"dist\" #>   ## robust renaming names(x)[1] <- \"identifier\" x #>  #> // datatagr object #>    identifier dist #> 1           4    2 #> 2           4   10 #> 3           7    4 #> 4           7   22 #> 5           8   16 #> 6           9   10 #> 7          10   18 #> 8          10   26 #> 9          10   34 #> 10         11   17 #> 11         11   28 #> 12         12   14 #> 13         12   20 #> 14         12   24 #> 15         12   28 #> 16         13   26 #> 17         13   34 #> 18         13   34 #> 19         13   46 #> 20         14   26 #> 21         14   36 #> 22         14   60 #> 23         14   80 #> 24         15   20 #> 25         15   26 #> 26         15   54 #> 27         16   32 #> 28         16   40 #> 29         17   32 #> 30         17   40 #> 31         17   50 #> 32         18   42 #> 33         18   56 #> 34         18   76 #> 35         18   84 #> 36         19   36 #> 37         19   46 #> 38         19   68 #> 39         20   32 #> 40         20   48 #> 41         20   52 #> 42         20   56 #> 43         20   64 #> 44         22   66 #> 45         23   54 #> 46         24   70 #> 47         24   92 #> 48         24   93 #> 49         24  120 #> 50         25   85 #>  #> // tags: mph:identifier, distance:dist   ## example of dropping tags by mistake - default: warning x[, 2] #> Warning: The following tags have lost their variable: #>  mph:identifier #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> // tags: distance:dist   ## to silence warnings when taggs are dropped lost_tags_action(\"none\") #> Lost tags will now be ignored. x[, 2] #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> // tags: distance:dist   ## to trigger errors when taggs are dropped # lost_tags_action(\"error\") # x[, 2:5]  ## reset default behaviour lost_tags_action() #> Lost tags will now issue a warning.  # using tidyverse style  ## example of creating a datatagr, adding a new variable, and adding a tag ## for it  if (require(dplyr) && require(magrittr)) {   x <- cars %>%     tibble() %>%     make_datatagr(       mph = \"speed\",       distance = \"dist\"     ) %>%     mutate(result = if_else(speed > 50, \"fast\", \"slow\")) %>%     set_tags(ticket = \"result\")    head(x)    ## extract tagged variables   x %>%     select(has_tag(c(\"mph\", \"distance\")))    x %>%     tags()    x %>%     select(starts_with(\"dist\")) } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Loading required package: magrittr #> Warning: The following tags have lost their variable: #>  ticket:result #> Warning: The following tags have lost their variable: #>  mph:speed, ticket:result #>  #> // datatagr object #> # A tibble: 50 × 1 #>     dist #>    <dbl> #>  1     2 #>  2    10 #>  3     4 #>  4    22 #>  5    16 #>  6    10 #>  7    18 #>  8    26 #>  9    34 #> 10    17 #> # ℹ 40 more rows #>  #> // tags: distance:dist"},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"A selector function to use in tidyverse functions — has_tag","title":"A selector function to use in tidyverse functions — has_tag","text":"selector function use tidyverse functions","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selector function to use in tidyverse functions — has_tag","text":"","code":"has_tag(tags)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A selector function to use in tidyverse functions — has_tag","text":"tags character vector tags listing variables want operate ","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A selector function to use in tidyverse functions — has_tag","text":"numeric vector containing position columns requested tags","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/has_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A selector function to use in tidyverse functions — has_tag","text":"","code":"## create datatagr x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" ) head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> // tags: mph:speed, distance:dist   if (require(dplyr) && require(magrittr)) {   x %>%     select(has_tag(c(\"mph\", \"distance\"))) %>%     head() } #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> // tags: mph:speed, distance:dist"},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and set behaviour for lost tags — lost_tags_action","title":"Check and set behaviour for lost tags — lost_tags_action","text":"function determines behaviour adopt tagged variables datatagr lost e.g. subsetting. achieved using options defined datatagr package.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and set behaviour for lost tags — lost_tags_action","text":"","code":"lost_tags_action(action = c(\"warning\", \"error\", \"none\"), quiet = FALSE)  get_lost_tags_action()"},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and set behaviour for lost tags — lost_tags_action","text":"action character indicating behaviour adopt tagged variables lost: \"error\" (default) issue error; \"warning\" issue warning; \"none\" nothing quiet logical indicating message displayed; used outside pipelines","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and set behaviour for lost tags — lost_tags_action","text":"returns NULL; option set options(\"datatagr\")","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and set behaviour for lost tags — lost_tags_action","text":"errors warnings generated datatagr case tagged variable loss custom class datatagr_error datatagr_warning respectively.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/lost_tags_action.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and set behaviour for lost tags — lost_tags_action","text":"","code":"# reset default - done automatically at package loading lost_tags_action() #> Lost tags will now issue a warning.  # check current value get_lost_tags_action() #> [1] \"warning\"  # change to issue errors when tags are lost lost_tags_action(\"error\") #> Lost tags will now issue an error. get_lost_tags_action() #> [1] \"error\"  # change to ignore when tags are lost lost_tags_action(\"none\") #> Lost tags will now be ignored. get_lost_tags_action() #> [1] \"none\"  # reset to default: warning lost_tags_action() #> Lost tags will now issue a warning."},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a datatagr from a data.frame — make_datatagr","title":"Create a datatagr from a data.frame — make_datatagr","text":"function converts data.frame tibble datatagr object, data tagged. output seem data.frame, datatagr-aware packages able automatically use tagged fields data cleaning analysis.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a datatagr from a data.frame — make_datatagr","text":"","code":"make_datatagr(x, ..., tag_defaults = list(), allow_extra = TRUE)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a datatagr from a data.frame — make_datatagr","text":"x data.frame tibble ... <dynamic-dots> series tags provided tag_name = \"column_name\". specifying tags, please also see tag_defaults specify default values. tag_defaults list default values provided tags. Defaults list(), effectively defaulting NULL values. allow_extra logical indicating additional data tags currently recognized datatagr allowed; FALSE, unknown tags trigger error","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a datatagr from a data.frame — make_datatagr","text":"function returns datatagr object.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/make_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a datatagr from a data.frame — make_datatagr","text":"","code":"x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" )  ## print result - just first few entries head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> // tags: mph:speed, distance:dist   ## check tags tags(x) #> $mph #> [1] \"speed\" #>  #> $distance #> [1] \"dist\" #>   ## Tags can also be passed as a list with the splice operator (!!!) my_tags <- list(   mph = \"speed\",   distance = \"dist\" ) new_x <- make_datatagr(cars, !!!my_tags)  ## The output is strictly equivalent to the previous one identical(x, new_x) #> [1] TRUE"},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns of a datatagr — names<-.datatagr","title":"Rename columns of a datatagr — names<-.datatagr","text":"function can used rename columns datatagr, adjusting tags needed.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns of a datatagr — names<-.datatagr","text":"","code":"# S3 method for class 'datatagr' names(x) <- value"},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns of a datatagr — names<-.datatagr","text":"x datatagr object value character vector set new names columns x","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns of a datatagr — names<-.datatagr","text":"datatagr new column names","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/names-set-.datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns of a datatagr — names<-.datatagr","text":"","code":"## create datatagr x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" ) head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> // tags: mph:speed, distance:dist   ## change names names(x)[1] <- \"speed in miles\"  ## see results: tags have been updated head(x) #>  #> // datatagr object #>   speed in miles dist #> 1              4    2 #> 2              4   10 #> 3              7    4 #> 4              7   22 #> 5              8   16 #> 6              9   10 #>  #> // tags: mph:speed in miles, distance:dist  tags(x) #> $mph #> [1] \"speed in miles\" #>  #> $distance #> [1] \"dist\" #>   # This also works with using `dplyr::rename()` because it uses names<-() # under the hood if (require(dplyr) && require(magrittr)) {   x <- x %>%     rename(speed = \"speed in miles\")   head(x)   tags(x) } #> $mph #> [1] \"speed\" #>  #> $distance #> [1] \"dist\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing method for datatagr objects — print.datatagr","title":"Printing method for datatagr objects — print.datatagr","text":"function prints datatagr objects.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing method for datatagr objects — print.datatagr","text":"","code":"# S3 method for class 'datatagr' print(x, ...)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing method for datatagr objects — print.datatagr","text":"x datatagr object ... arguments passed 'print'","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing method for datatagr objects — print.datatagr","text":"Invisibly returns object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/print.datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing method for datatagr objects — print.datatagr","text":"","code":"## create datatagr x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" )  ## print object - using only the first few entries head(x) #>  #> // datatagr object #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10 #>  #> // tags: mph:speed, distance:dist   # version with a tibble if (require(tibble) && require(magrittr)) {   cars %>%     tibble() %>%     make_datatagr(       mph = \"speed\",       distance = \"dist\"     ) } #> Loading required package: tibble #>  #> // datatagr object #> # A tibble: 50 × 2 #>    speed  dist #>    <dbl> <dbl> #>  1     4     2 #>  2     4    10 #>  3     7     4 #>  4     7    22 #>  5     8    16 #>  6     9    10 #>  7    10    18 #>  8    10    26 #>  9    10    34 #> 10    11    17 #> # ℹ 40 more rows #>  #> // tags: mph:speed, distance:dist"},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes tags of a datatagr object — set_tags","title":"Changes tags of a datatagr object — set_tags","text":"function changes tags datatagr object, using syntax constructor make_datatagr(). default tags missing, added final object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes tags of a datatagr object — set_tags","text":"","code":"set_tags(x, ..., tag_defaults = list(), allow_extra = TRUE)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes tags of a datatagr object — set_tags","text":"x data.frame tibble ... <dynamic-dots> series tags provided tag_name = \"column_name\". specifying tags, please also see tag_defaults specify default values. tag_defaults list default values provided tags. Defaults list(), effectively defaulting NULL values. allow_extra logical indicating additional data tags currently recognized datatagr allowed; FALSE, unknown tags trigger error","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changes tags of a datatagr object — set_tags","text":"function returns datatagr object.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/set_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes tags of a datatagr object — set_tags","text":"","code":"## create a datatagr x <- make_datatagr(cars, mph = \"speed\") tags(x) #> $mph #> [1] \"speed\" #>   ## add new tags and fix an existing one x <- set_tags(x, distance = \"dist\") tags(x) #> $mph #> [1] \"speed\" #>  #> $distance #> [1] \"dist\" #>   ## remove tags by setting them to NULL old_tags <- tags(x) x <- set_tags(x, mph = NULL, distance = NULL) tags(x) #> named list()  ## setting tags providing a list (used to restore old tags here) x <- set_tags(x, !!!old_tags) tags(x) #> $mph #> [1] \"speed\" #>  #> $distance #> [1] \"dist\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting of datatagr objects — [.datatagr","title":"Subsetting of datatagr objects — [.datatagr","text":"[] [[]] operators datatagr objects behaves like regular data.frame tibble, check tagged variables lost, takes appropriate action case (warning, error, ignore, depending general option set via lost_tags_action()) .","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting of datatagr objects — [.datatagr","text":"","code":"# S3 method for class 'datatagr' x[i, j, drop = FALSE]  # S3 method for class 'datatagr' x[i, j] <- value  # S3 method for class 'datatagr' x[[i, j]] <- value  # S3 method for class 'datatagr' x$name <- value"},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting of datatagr objects — [.datatagr","text":"x datatagr object vector integer logical subset rows datatagr j vector character, integer, logical subset columns datatagr drop logical indicating , single column selected, data.frame class dropped return simple vector, case datatagr class lost well; defaults FALSE value replacement used entries identified x name literal character string name (possibly backtick     quoted).  extraction, normally (see     ‘Environments’) partially matched names     object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting of datatagr objects — [.datatagr","text":"drop happening, datatagr. Otherwise atomic vector.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/sub_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting of datatagr objects — [.datatagr","text":"","code":"if (require(dplyr) && require(magrittr)) {   ## create a datatagr   x <- cars %>%     make_datatagr(       mph = \"speed\",       distance = \"dist\"     ) %>%     mutate(result = if_else(speed > 50, \"fast\", \"slow\")) %>%     set_tags(ticket = \"result\")   x    ## dangerous removal of a tagged column setting it to NULL issues a warning   x[, 1] <- NULL   x    x[[2]] <- NULL   x    x$age <- NULL   x } #> Warning: The following tags have lost their variable: #>  mph:speed #> Warning: The following tags have lost their variable: #>  ticket:result #>  #> // datatagr object #>    dist #> 1     2 #> 2    10 #> 3     4 #> 4    22 #> 5    16 #> 6    10 #> 7    18 #> 8    26 #> 9    34 #> 10   17 #> 11   28 #> 12   14 #> 13   20 #> 14   24 #> 15   28 #> 16   26 #> 17   34 #> 18   34 #> 19   46 #> 20   26 #> 21   36 #> 22   60 #> 23   80 #> 24   20 #> 25   26 #> 26   54 #> 27   32 #> 28   40 #> 29   32 #> 30   40 #> 31   50 #> 32   42 #> 33   56 #> 34   76 #> 35   84 #> 36   36 #> 37   46 #> 38   68 #> 39   32 #> 40   48 #> 41   52 #> 42   56 #> 43   64 #> 44   66 #> 45   54 #> 46   70 #> 47   92 #> 48   93 #> 49  120 #> 50   85 #>  #> // tags: distance:dist"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of tags in a datatagr — tags","title":"Get the list of tags in a datatagr — tags","text":"function returns list tags identifying specific variable types datatagr.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of tags in a datatagr — tags","text":"","code":"tags(x, show_null = FALSE)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the list of tags in a datatagr — tags","text":"x datatagr object show_null logical indicating complete list tags, including NULL ones, returned; FALSE, tags non-NULL value returned; defaults FALSE","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of tags in a datatagr — tags","text":"function returns named list names indicate generic types data, values indicate column correspond .","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the list of tags in a datatagr — tags","text":"Tags stored tags attribute object.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of tags in a datatagr — tags","text":"","code":"## make a datatagr x <- make_datatagr(cars, mph = \"speed\")  ## check non-null tags tags(x) #> $mph #> [1] \"speed\" #>   ## get a list of all tags, including NULL ones tags(x, TRUE) #> $mph #> [1] \"speed\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a data.frame of all tagged variables — tags_df","title":"Extract a data.frame of all tagged variables — tags_df","text":"function returns data.frame tagged variables stored datatagr. Note output longer datatagr, regular data.frame.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a data.frame of all tagged variables — tags_df","text":"","code":"tags_df(x)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a data.frame of all tagged variables — tags_df","text":"x datatagr object","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a data.frame of all tagged variables — tags_df","text":"data.frame tagged variables.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a data.frame of all tagged variables — tags_df","text":"","code":"x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" )  ## get a data.frame of all tagged variables tags_df(x) #>    mph distance #> 1    4        2 #> 2    4       10 #> 3    7        4 #> 4    7       22 #> 5    8       16 #> 6    9       10 #> 7   10       18 #> 8   10       26 #> 9   10       34 #> 10  11       17 #> 11  11       28 #> 12  12       14 #> 13  12       20 #> 14  12       24 #> 15  12       28 #> 16  13       26 #> 17  13       34 #> 18  13       34 #> 19  13       46 #> 20  14       26 #> 21  14       36 #> 22  14       60 #> 23  14       80 #> 24  15       20 #> 25  15       26 #> 26  15       54 #> 27  16       32 #> 28  16       40 #> 29  17       32 #> 30  17       40 #> 31  17       50 #> 32  18       42 #> 33  18       56 #> 34  18       76 #> 35  18       84 #> 36  19       36 #> 37  19       46 #> 38  19       68 #> 39  20       32 #> 40  20       48 #> 41  20       52 #> 42  20       56 #> 43  20       64 #> 44  22       66 #> 45  23       54 #> 46  24       70 #> 47  24       92 #> 48  24       93 #> 49  24      120 #> 50  25       85"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_types.html","id":null,"dir":"Reference","previous_headings":"","what":"List acceptable variable types for tags — tags_types","title":"List acceptable variable types for tags — tags_types","text":"function returns named list providing acceptable data types default tags. argument provided, returns default values. Otherwise, provided values used define defaults.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List acceptable variable types for tags — tags_types","text":"","code":"tags_types(..., allow_extra = TRUE)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List acceptable variable types for tags — tags_types","text":"... <dynamic-dots> series tags provided tag_name = \"column_name\". specifying tags, please also see tag_defaults specify default values. allow_extra logical indicating additional data tags currently recognized datatagr allowed; FALSE, unknown tags trigger error","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List acceptable variable types for tags — tags_types","text":"named list.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/tags_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List acceptable variable types for tags — tags_types","text":"","code":"# list default values tags_types() #> list()  # change existing values tags_types(date_onset = \"Date\") # impose a Date class #> $date_onset #> [1] \"Date\" #>   # add new types e.g. to allow genetic sequences using ape's format tags_types(sequence = \"DNAbin\", allow_extra = TRUE) #> $sequence #> [1] \"DNAbin\" #>"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the content of a datatagr object — validate_datatagr","title":"Checks the content of a datatagr object — validate_datatagr","text":"function evaluates validity datatagr object checking object class, tags, types tagged variables. combines validations checks made validate_types() validate_tags(). See 'Details' section information checks performed.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the content of a datatagr object — validate_datatagr","text":"","code":"validate_datatagr(x, ref_types = tags_types())"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the content of a datatagr object — validate_datatagr","text":"x datatagr object ref_types list providing allowed types tags, returned tags_types()","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the content of a datatagr object — validate_datatagr","text":"checks pass, datatagr object; otherwise issues error.","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks the content of a datatagr object — validate_datatagr","text":"following checks performed: x datatagr object x well-formed tags attribute default tags present (even NULL) tagged variables correspond existing columns tagged variables acceptable class (optional) x extra tag beyond default tags","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_datatagr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the content of a datatagr object — validate_datatagr","text":"","code":"if (require(magrittr)) {   ## create a valid datatagr   x <- cars %>%     make_datatagr(       mph = \"speed\",       distance = \"dist\"     )   x    ## validation   validate_datatagr(x, ref_types = tags_types(     mph = c(\"numeric\", \"factor\"),     distance = \"numeric\"   ))    ## the below issues an error   ## note: tryCatch is only used to avoid a genuine error in the example   tryCatch(validate_datatagr(x, ref_types = tags_types(     mph = c(\"numeric\", \"factor\"),     distance = \"factor\"   )), error = paste) } #> [1] \"Error: Some tags have the wrong class:\\n  - distance: Must inherit from class 'factor', but has class 'numeric'\\n\\n\""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the tags of a datatagr object — validate_tags","title":"Checks the tags of a datatagr object — validate_tags","text":"function evaluates validity tags datatagr object checking : ) tags present ii) tags list character iii) default tags present iv) tagged variables exist v) extra tag exists (allow_extra FALSE).","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the tags of a datatagr object — validate_tags","text":"","code":"validate_tags(x)"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the tags of a datatagr object — validate_tags","text":"x datatagr object","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the tags of a datatagr object — validate_tags","text":"checks pass, datatagr object; otherwise issues error.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the tags of a datatagr object — validate_tags","text":"","code":"if (require(dplyr) && require(magrittr)) {   ## create a valid datatagr   x <- cars %>%     make_datatagr(       mph = \"speed\",       distance = \"dist\"     )   x    ## the below issues an error as datatagr doesn't know any defaults   ## note: tryCatch is only used to avoid a genuine error in the example   tryCatch(validate_datatagr(x), error = paste)    ## validation requires you to specify the types directly   validate_datatagr(x, ref_types = tags_types(     mph = c(\"integer\", \"numeric\"),     distance = \"numeric\"   )) } #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> // tags: mph:speed, distance:dist"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Check tagged variables are the right class — validate_types","title":"Check tagged variables are the right class — validate_types","text":"function checks class tagged variable datatagr pre-defined accepted classes tags_types().","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check tagged variables are the right class — validate_types","text":"","code":"validate_types(x, ref_types = tags_types())"},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check tagged variables are the right class — validate_types","text":"x datatagr object ref_types list providing allowed types tags, returned tags_types()","code":""},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check tagged variables are the right class — validate_types","text":"named list.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datatagr/reference/validate_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check tagged variables are the right class — validate_types","text":"","code":"x <- make_datatagr(cars,   mph = \"speed\",   distance = \"dist\" ) x #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> // tags: mph:speed, distance:dist   ## the below would issue an error ## note: tryCatch is only used to avoid a genuine error in the example tryCatch(validate_types(x), error = paste) #> [1] \"Error: Allowed types for tag `mph`, `distance` are not documented in `ref_types`.\\n\"  ## to allow other types, e.g. gender to be integer, character or factor validate_types(x, tags_types(mph = \"numeric\", distance = c(   \"integer\",   \"character\", \"numeric\" ))) #>  #> // datatagr object #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85 #>  #> // tags: mph:speed, distance:dist"}]

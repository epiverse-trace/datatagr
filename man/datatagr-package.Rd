% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datatagr-package.R
\docType{package}
\name{datatagr-package}
\alias{datatagr-package}
\alias{datatagr}
\title{Base Tools for Tagging and Validating Data}
\description{
The \emph{datatagr} package provides tools to help tag and validate data. The
'datatagr' class adds a custom tagging system to classical 'data.frame'
objects to identify key data. Once tagged, these variables can be seamlessly
used in downstream analyses, making data pipelines more robust and reliable.
}
\section{Main functions}{

\itemize{
\item \code{\link[=make_datatagr]{make_datatagr()}}: to create \code{datatagr} objects from a \code{data.frame} or a
\code{tibble}
\item \code{\link[=set_tags]{set_tags()}}: to change or add tagged variables in a \code{datatagr}
\item \code{\link[=tags]{tags()}}: to get the list of tags of a \code{datatagr}
\item \code{\link[=tags_df]{tags_df()}}: to get a \code{data.frame} of all tagged variables
\item \code{\link[=lost_tags_action]{lost_tags_action()}}: to change the behaviour of actions where tagged
variables are lost (e.g. removing columns storing tagged variables) to
issue warnings, errors, or do nothing
\item \code{\link[=get_lost_tags_action]{get_lost_tags_action()}}: to check the current behaviour of actions where
tagged variables are lost
}
}

\section{Dedicated methods}{


Specific methods commonly used to handle \code{data.frame} are provided for
\code{datatagr} objects, typically to help flag or prevent actions which could
alter or lose tagged variables (and may thus break downstream data
pipelines).
\itemize{
\item \verb{names() <-} (and related functions, such as \code{\link[dplyr:rename]{dplyr::rename()}}) will
rename tags as needed
\item \verb{x[...] <-} and \verb{x[[...]] <-} (see \link{sub_datatagr}): will adopt the
desired behaviour when tagged variables are lost
\item \code{print()}: prints info about the \code{datatagr} in addition to the
\code{data.frame} or \code{tibble}
}
}

\examples{

# using base R style
x <- make_datatagr(cars[1:50, ],
  mph = "speed",
  distance = "dist"
)
x

## check tagged variables
tags(x)

## robust renaming
names(x)[1] <- "identifier"
x

## example of dropping tags by mistake - default: warning
x[, 2]

## to silence warnings when taggs are dropped
lost_tags_action("none")
x[, 2]

## to trigger errors when taggs are dropped
# lost_tags_action("error")
# x[, 2:5]

## reset default behaviour
lost_tags_action()

# using tidyverse style

## example of creating a datatagr, adding a new variable, and adding a tag
## for it

if (require(dplyr) && require(magrittr)) {
  x <- cars \%>\%
    tibble() \%>\%
    make_datatagr(
      mph = "speed",
      distance = "dist"
    ) \%>\%
    mutate(result = if_else(speed > 50, "fast", "slow")) \%>\%
    set_tags(ticket = "result")

  head(x)

  ## extract tagged variables
  x \%>\%
    select(has_tag(c("mph", "distance")))

  x \%>\%
    tags()

  x \%>\%
    select(starts_with("dist"))
}

}
\author{
\strong{Maintainer}: Chris Hartgerink \email{chris@data.org} (\href{https://orcid.org/0000-0003-1050-6809}{ORCID})

}
\keyword{internal}
